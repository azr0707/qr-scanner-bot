import logging
import asyncio
import qrcode
import io
import uuid
import urllib.parse
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

API_TOKEN = "8468433983:AAEhRMkYZr_lXTLyzzFiAnJWtZnBVB_2gQI"
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class AdminStates(StatesGroup):
    waiting_for_partner_id = State()
    waiting_for_company_name = State()

qr_codes_db = {}
user_qr_history = {}
partners_db = {}
partner_stats = {}
ADMINS = []

def is_admin(user_id: int) -> bool:
    return user_id in ADMINS

def register_partner(user_id: int, company_name: str = "–ú–∞–≥–∞–∑–∏–Ω"):
    partners_db[user_id] = {
        'company_name': company_name,
        'registered_at': datetime.now(),
        'is_active': True,
        'added_by_admin': True
    }
    partner_stats[user_id] = {
        'today_checks': 0,
        'today_success': 0,
        'total_checks': 0,
        'total_success': 0
    }
    return partners_db[user_id]

def generate_qr_code(user_id: int, discount_type: str = "10%", valid_minutes: int = 5):
    qr_id = str(uuid.uuid4())[:8].upper()
    created_at = datetime.now()
    expires_at = created_at + timedelta(minutes=valid_minutes)
    
    qr_data = f"DISCOUNT:{qr_id}:USER:{user_id}:TYPE:{discount_type}:EXP:{expires_at.timestamp()}"
    
    qr = qrcode.QRCode(version=1, box_size=10, border=4)
    qr.add_data(qr_data)
    qr.make(fit=True)
    img = qr.make_image(fill_color="black", back_color="white")
    bio = io.BytesIO()
    img.save(bio, 'PNG')
    bio.seek(0)
    
    qr_codes_db[qr_id] = {
        'user_id': user_id,
        'created_at': created_at,
        'expires_at': expires_at,
        'is_used': False,
        'used_at': None,
        'discount_type': discount_type,
        'qr_data': qr_data
    }
    
    if user_id not in user_qr_history:
        user_qr_history[user_id] = []
    user_qr_history[user_id].append(qr_id)
    
    return qr_id, bio, expires_at

def validate_qr_data_from_deeplink(qr_data: str, partner_id: int):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è QR-–∫–æ–¥–∞ –∏–∑ deep link (—Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –±–∞–∑–µ)"""
    try:
        logger.info(f"Validating QR data from deep link: {qr_data}")
        
        parts = qr_data.split(':')
        if len(parts) < 6 or parts[0] != 'DISCOUNT':
            return {'valid': False, 'reason': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç QR-–∫–æ–¥–∞'}
        
        qr_id = parts[1]
        user_id = int(parts[3])  # USER ID
        discount_type = parts[5]  # TYPE
        exp_timestamp = float(parts[7])  # EXP timestamp
        
        expires_at = datetime.fromtimestamp(exp_timestamp)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
        if datetime.now() > expires_at:
            return {'valid': False, 'reason': 'QR-–∫–æ–¥ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω'}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç QR-–∫–æ–¥
        if qr_id in qr_codes_db and qr_codes_db[qr_id]['is_used']:
            return {'valid': False, 'reason': 'QR-–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω'}
        
        # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
        if qr_id not in qr_codes_db:
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            qr_codes_db[qr_id] = {
                'user_id': user_id,
                'created_at': datetime.fromtimestamp(float(parts[9]) if len(parts) > 9 else exp_timestamp - 300),
                'expires_at': expires_at,
                'is_used': True,
                'used_at': datetime.now(),
                'discount_type': discount_type,
                'qr_data': qr_data,
                'used_by_partner': partner_id
            }
        else:
            qr_codes_db[qr_id]['is_used'] = True
            qr_codes_db[qr_id]['used_at'] = datetime.now()
            qr_codes_db[qr_id]['used_by_partner'] = partner_id
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Ç–Ω–µ—Ä–∞
        if partner_id in partner_stats:
            partner_stats[partner_id]['today_checks'] += 1
            partner_stats[partner_id]['today_success'] += 1
            partner_stats[partner_id]['total_checks'] += 1
            partner_stats[partner_id]['total_success'] += 1
        
        return {
            'valid': True,
            'qr_id': qr_id,
            'user_id': user_id,
            'discount_type': discount_type,
            'created_at': qr_codes_db[qr_id]['created_at']
        }
        
    except Exception as e:
        logger.error(f"Validation error from deep link: {e}")
        return {'valid': False, 'reason': f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}'}

def validate_qr_data(qr_data: str, partner_id: int):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è QR-–∫–æ–¥–∞ –∏–∑ WebApp (—Ä–∞–±–æ—Ç–∞–µ—Ç —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö)"""
    try:
        logger.info(f"Validating QR data: {qr_data}")
        
        parts = qr_data.split(':')
        if len(parts) < 6 or parts[0] != 'DISCOUNT':
            return {'valid': False, 'reason': '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç QR-–∫–æ–¥–∞'}
        
        qr_id = parts[1]
        logger.info(f"QR ID from data: {qr_id}")
        
        if qr_id not in qr_codes_db:
            return {'valid': False, 'reason': 'QR-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω'}
        
        qr_info = qr_codes_db[qr_id]
        
        if qr_info['is_used']:
            return {'valid': False, 'reason': 'QR-–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω'}
        
        if datetime.now() > qr_info['expires_at']:
            return {'valid': False, 'reason': 'QR-–∫–æ–¥ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω'}
        
        qr_codes_db[qr_id]['is_used'] = True
        qr_codes_db[qr_id]['used_at'] = datetime.now()
        qr_codes_db[qr_id]['used_by_partner'] = partner_id
        
        if partner_id in partner_stats:
            partner_stats[partner_id]['today_checks'] += 1
            partner_stats[partner_id]['today_success'] += 1
            partner_stats[partner_id]['total_checks'] += 1
            partner_stats[partner_id]['total_success'] += 1
        
        return {
            'valid': True,
            'qr_id': qr_id,
            'user_id': qr_info['user_id'],
            'discount_type': qr_info['discount_type'],
            'created_at': qr_info['created_at']
        }
        
    except Exception as e:
        logger.error(f"Validation error: {e}")
        return {'valid': False, 'reason': f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}'}

# ==================== –û–ë–†–ê–ë–û–¢–ö–ê DEEP LINK –ò–ó –°–ö–ê–ù–ï–†–ê ====================

async def check_qr_from_deeplink(message: types.Message, qr_data: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ QR-–∫–æ–¥–∞ –∏–∑ deep link —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    user_id = message.from_user.id
    logger.info(f"Deep link QR check with data: {qr_data} by user {user_id}")
    
    if user_id not in partners_db:
        await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–∞–∫ –ø–∞—Ä—Ç–Ω–µ—Ä!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º QR-–∫–æ–¥ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (—Å–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è deep link)
    result = validate_qr_data_from_deeplink(qr_data, user_id)
    
    if result['valid']:
        success_message = (
            f"‚úÖ **QR-–∫–æ–¥ –î–ï–ô–°–¢–í–ò–¢–ï–õ–ï–ù!**\n\n"
            f"üé´ ID: `{result['qr_id']}`\n"
            f"üéÅ –°–∫–∏–¥–∫–∞: {result['discount_type']}\n"
            f"üë§ ID –∫–ª–∏–µ–Ω—Ç–∞: `{result['user_id']}`\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω: {result['created_at'].strftime('%H:%M %d.%m.%Y')}\n\n"
            f"**‚úÖ –°–∫–∏–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!**"
        )
        await message.answer(success_message, parse_mode="Markdown")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        try:
            client_user_id = result['user_id']
            await bot.send_message(
                client_user_id,
                f"üéâ **–í–∞—à QR-–∫–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!**\n\n"
                f"üé´ ID: `{result['qr_id']}`\n"
                f"üè™ –ü–∞—Ä—Ç–Ω–µ—Ä: `{user_id}`\n"
                f"üïí –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M %d.%m.%Y')}\n\n"
                f"–°–∫–∏–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞! ‚úÖ",
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ {result['user_id']}: {e}")
            
    else:
        error_message = (
            f"‚ùå **QR-–∫–æ–¥ –ù–ï–î–ï–ô–°–¢–í–ò–¢–ï–õ–ï–ù!**\n\n"
            f"üìã –ü—Ä–∏—á–∏–Ω–∞: **{result['reason']}**\n\n"
            f"‚ö†Ô∏è **–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ —Å–∫–∏–¥–∫—É!**"
        )
        await message.answer(error_message, parse_mode="Markdown")

# ==================== –ö–û–ú–ê–ù–î–´ –î–õ–Ø –û–¢–õ–ê–î–ö–ò ====================

@dp.message_handler(commands=['myid', 'id'])
async def get_my_id(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    
    response = (
        f"üîç **–í–ê–®–ò –î–ê–ù–ù–´–ï:**\n\n"
        f"üë§ User ID: `{user_id}`\n"
        f"üìõ Username: `{username}`\n"
        f"üîë –ê–¥–º–∏–Ω: `{'‚úÖ –î–ê' if is_admin(user_id) else '‚ùå –ù–ï–¢'}`\n"
        f"üè™ –ü–∞—Ä—Ç–Ω–µ—Ä: `{'‚úÖ –î–ê' if user_id in partners_db else '‚ùå –ù–ï–¢'}`\n\n"
        f"üí° **–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω-–ø—Ä–∞–≤ –Ω–∞–ø–∏—à–∏—Ç–µ:** /makeadmin"
    )
    await message.answer(response, parse_mode="Markdown")

@dp.message_handler(commands=['makeadmin'])
async def make_me_admin(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    
    if username == "az64335":
        if user_id not in ADMINS:
            ADMINS.append(user_id)
            register_partner(user_id, "–ê–î–ú–ò–ù")
        
        await message.answer(
            f"‚úÖ **–í–´ –°–¢–ê–õ–ò –ê–î–ú–ò–ù–û–ú!**\n\n"
            f"üë§ User ID: `{user_id}`\n"
            f"üìõ Username: `{username}`\n\n"
            f"**–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞:** /start\n\n"
            f"‚öôÔ∏è **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!**",
            parse_mode="Markdown"
        )
    else:
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å az64335 –º–æ–∂–µ—Ç —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–æ–º!")

# ==================== –û–°–ù–û–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ====================

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    try:
        # –ü–†–û–í–ï–†–Ø–ï–ú DEEP LINK –ü–ê–†–ê–ú–ï–¢–† –° –ü–û–õ–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò
        command_parts = message.text.split()
        if len(command_parts) > 1 and command_parts[1].startswith('full_'):
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ QR-–∫–æ–¥–∞
            qr_data = urllib.parse.unquote(command_parts[1][5:])  # –£–±–∏—Ä–∞–µ–º 'full_'
            logger.info(f"Received deep link QR data: {qr_data}")
            await check_qr_from_deeplink(message, qr_data)
            return
        
        user_id = message.from_user.id
        username = message.from_user.username
        
        if username == "az64335" and user_id not in ADMINS:
            ADMINS.append(user_id)
            register_partner(user_id, "–ê–î–ú–ò–ù")
            logger.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω: {user_id}")
        
        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        
        if is_admin(user_id):
            keyboard.row("üë§ –Ø –∫–ª–∏–µ–Ω—Ç", "üè™ –Ø –ø–∞—Ä—Ç–Ω–µ—Ä")
            keyboard.row("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
            
            await message.answer(
                "üëã **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–î–ú–ò–ù!** üéØ\n\n"
                "–£ –≤–∞—Å –µ—Å—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º —Å–∏—Å—Ç–µ–º—ã.",
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        else:
            keyboard.row("üë§ –Ø –∫–ª–∏–µ–Ω—Ç", "üè™ –Ø –ø–∞—Ä—Ç–Ω–µ—Ä")
            
            await message.answer(
                "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã—Ö —Å–∫–∏–¥–æ–∫!\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
                reply_markup=keyboard
            )
        
    except Exception as e:
        logger.error(f"Error in cmd_start: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞")

# ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...

@dp.message_handler(content_types=['web_app_data'])
async def handle_web_app_data(message: types.Message):
    try:
        user_id = message.from_user.id
        logger.info(f"WebApp data received from user {user_id}")
        
        if user_id not in partners_db:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–∞–∫ –ø–∞—Ä—Ç–Ω–µ—Ä!")
            return
        
        qr_data = message.web_app_data.data
        logger.info(f"Received QR data from Web-App: {qr_data}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–ª—è WebApp
        result = validate_qr_data(qr_data, user_id)
        
        if result['valid']:
            success_message = (
                f"‚úÖ **QR-–∫–æ–¥ –î–ï–ô–°–¢–í–ò–¢–ï–õ–ï–ù!**\n\n"
                f"üé´ ID: `{result['qr_id']}`\n"
                f"üéÅ –°–∫–∏–¥–∫–∞: {result['discount_type']}\n"
                f"üë§ ID –∫–ª–∏–µ–Ω—Ç–∞: `{result['user_id']}`\n"
                f"üìÖ –°–æ–∑–¥–∞–Ω: {result['created_at'].strftime('%H:%M %d.%m.%Y')}\n\n"
                f"**‚úÖ –°–∫–∏–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞!**\n"
                f"–ú–æ–∂–µ—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —Å–∫–∏–¥–∫—É –∫–ª–∏–µ–Ω—Ç—É! üéâ"
            )
            
            await message.answer(success_message, parse_mode="Markdown")
            
            try:
                client_user_id = result['user_id']
                await bot.send_message(
                    client_user_id,
                    f"üéâ **–í–∞—à QR-–∫–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!**\n\n"
                    f"üé´ ID: `{result['qr_id']}`\n"
                    f"üè™ –ü–∞—Ä—Ç–Ω–µ—Ä: `{user_id}`\n"
                    f"üïí –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M %d.%m.%Y')}\n\n"
                    f"–°–∫–∏–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞! ‚úÖ",
                    parse_mode="Markdown"
                )
            except Exception as e:
                logger.info(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ {result['user_id']}: {e}")
                
        else:
            error_message = (
                f"‚ùå **QR-–∫–æ–¥ –ù–ï–î–ï–ô–°–¢–í–ò–¢–ï–õ–ï–ù!**\n\n"
                f"üìã –ü—Ä–∏—á–∏–Ω–∞: **{result['reason']}**\n\n"
                f"‚ö†Ô∏è **–ù–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ —Å–∫–∏–¥–∫—É!**\n"
                f"–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π QR-–∫–æ–¥"
            )
            
            await message.answer(error_message, parse_mode="Markdown")
            
    except Exception as e:
        logger.error(f"Web app data error: {e}")
        error_text = (
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ QR-–∫–æ–¥–∞\n\n"
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç QR-–∫–æ–¥–∞\n"
            "‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º\n"
            "‚Ä¢ –û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "‚Ä¢ –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ ID\n"
            "‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞–Ω–µ—Ä"
        )
        await message.answer(error_text)

# ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...

async def on_startup(dp):
    logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
    
    asyncio.create_task(cleanup_expired_qr_codes())
    asyncio.create_task(reset_daily_stats())
    
    for admin_id in ADMINS:
        try:
            await bot.send_message(
                admin_id,
                "ü§ñ **–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!**\n\n"
                "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã:\n"
                f"‚Ä¢ –ü–∞—Ä—Ç–Ω–µ—Ä–æ–≤: {len(partners_db)}\n"
                f"‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_qr_history)}\n"
                f"‚Ä¢ QR-–∫–æ–¥–æ–≤ –≤ –±–∞–∑–µ: {len(qr_codes_db)}\n\n"
                "üîÑ –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã!",
                parse_mode="Markdown"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ {admin_id}: {e}")

async def on_shutdown(dp):
    logger.info("üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")
    
    for admin_id in ADMINS:
        try:
            await bot.send_message(admin_id, "üõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        except:
            pass
    
    await bot.close()

if __name__ == '__main__':
    try:
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ QR-CODE BOT...")
        print("=" * 60)
        print("üöÄ QR-CODE BOT WITH DEEP LINK SCANNER")
        print("üì± Version: 7.0 - FIXED DEEP LINK VALIDATION")
        print("üëë Admin: az64335")
        print("üîó Scanner: https://azr0707.github.io/qr-scanner-bot/")
        print("üìä System ready for operation")
        print("=" * 60)
        
        executor.start_polling(
            dp,
            skip_updates=True,
            on_startup=on_startup,
            on_shutdown=on_shutdown
        )
        
    except KeyboardInterrupt:
        logger.info("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        print("\n‚èπ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        logger.info("üõë –ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        print("üõë –ë–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω") –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")